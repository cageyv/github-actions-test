# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Dump github context
      - name: Dump github context
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
         GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Echo test
        run: | 
          echo "github.event.repository.name: ${{ github.event.repository.name }}"
          echo $GITHUB_REF
          echo "${GITHUB_REF#refs/heads/}":refs/heads/"$GIT_DESTINATION_BRANCH"
          echo $GIT_REMOTE

      - name: Prepare
        id: prepare
        env: 
          PR_GIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "Prepare variables. Read files from $(pwd)"
          echo ::set-output name=deploy_date::"$(date -u --iso-8601=seconds)"

          git_sha_generated="$GITHUB_SHA"
          if [[ ${{ github.event_name }} -eq 'pull_request' ]]; then git_sha_generated="$PR_GIT_SHA"; fi
          echo "$git_sha_generated"
          echo ::set-output name=git_sha::"$git_sha_generated";     

          git_branch_generated="$GITHUB_REF_NAME"
          if [[ ${{ github.event_name  }} -eq 'pull_request' ]]; then git_branch_generated="$GITHUB_HEAD_REF"; fi
          echo ::set-output name=git_branch::"$git_branch_generated";

          if [[ -f ".application_ecr_name" ]]; then echo ::set-output name=ecr_name::"$(cat .application_ecr_name)"; else echo ::set-output name=ecr_name::${{ github.event.repository.name }};fi

          ecr_tag_generated="$git_sha_generated"
          if [[ -f ".application_ecr_tag" ]]; then ecr_tag_generated="$(cat .application_ecr_tag)"; fi
          echo ::set-output name=ecr_tag::"$ecr_tag_generated";


