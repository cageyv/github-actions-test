# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  prepare:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs: # Search for needs.prepare.outputs to see where
      AWS_DEFAULT_REGION: "eu-central-1"
      application_deploy_date: ${{ steps.prepare.outputs.application_deploy_date }}
      application_revision: ${{ steps.prepare.outputs.application_revision }}
      application_version: ${{ steps.prepare.outputs.application_version }}
      application_ecr_name: ${{ steps.prepare.outputs.application_ecr_name }}
      application_ecr_tag: ${{ steps.prepare.outputs.application_ecr_tag }}      
      AWS_ECR_CLIENT_IGNORE_CVE_LEVEL: ${{ steps.prepare.outputs.ignore_cve_level }}
      AWS_ECR_CLIENT_IGNORE_CVE: ${{ steps.prepare.outputs.ignore_cve }}
      allow_deploy_to_prod: ${{ steps.prepare.outputs.allow_deploy_to_prod }}    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Dump github context
      - name: Dump github context
        run:   echo "$GITHUB_CONTEXT"
        shell: bash
        env:
         GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Echo test
        run: | 
          echo "github.event.repository.name: ${{ github.event.repository.name }}"
          echo $GITHUB_REF
          echo "${GITHUB_REF#refs/heads/}":refs/heads/"$GIT_DESTINATION_BRANCH"
          echo $GIT_REMOTE

      - name: Prepare
        id: prepare
        run: |
          echo "Prepare variables. Read files from $GITHUB_WORKSPACE"
          echo ::set-output name=application_deploy_date::"$(date -u --iso-8601=seconds)"

          if [[ ${{ github.event_name }} == "pull_request" ]]; then 
            application_revision="$(echo ${{ github.event.pull_request.head.sha }})"
            application_version="$(echo ${{ github.head_ref }})"
          else
            application_revision="$(echo ${{ github.sha }})"
            application_version="$(echo ${{ github.ref_name }})"
          fi
          application_revision=${application_revision//[^a-zA-Z0-9_.-]/-}
          application_version=${application_version//[^a-zA-Z0-9_.-]/-}
          application_ecr_tag=$application_revision

          echo ::set-output name=application_revision::"$application_revision"
          echo ::set-output name=application_version::"$application_version"
          if [[ -f ".application_ecr_tag" ]]; then echo ::set-output name=application_ecr_tag::"$(cat .application_ecr_name)"; else echo ::set-output name=application_ecr_tag::"$application_ecr_tag"; fi
          if [[ -f ".application_ecr_name" ]]; then echo "::set-output name=application_ecr_name::$(cat .application_ecr_name)"; else echo "::set-output name=application_ecr_name::${{ github.event.repository.name }}"; fi
          if [[ -f ".aws_ecr_client_ignore_cve_level" ]]; then echo ::set-output name=ignore_cve_level::"$(cat .aws_ecr_client_ignore_cve_level)"; else echo ::set-output name=ignore_cve_level::"";fi
          if [[ -f ".aws_ecr_client_ignore_cve" ]]; then echo ::set-output name=ignore_cve::"$(cat .aws_ecr_client_ignore_cve)"; else echo ::set-output name=ignore_cve::"";fi
          if [[ -f ".skip_promotion_to_prod" ]]; then echo ::set-output name=allow_deploy_to_prod::; else echo ::set-output name=allow_deploy_to_prod::"true";fi


  # This workflow contains a single job called "build"
  test-output:  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [prepare]    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Test Out
        run: |
          echo "${{ needs.prepare.outputs.application_revision }}"
          echo "${{ needs.prepare.outputs.application_version }}"
          echo "${{ needs.prepare.outputs.application_deploy_date }}"
          echo "${{ needs.prepare.outputs.application_ecr_name }}"
          echo "${{ needs.prepare.outputs.application_ecr_tag }}"          

